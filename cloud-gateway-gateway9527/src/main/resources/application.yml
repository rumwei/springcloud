server:
  port: 9527

# 假设现在本9527应用需要对cloud-provider-payment8002(后称8002)服务进行路由
# 查看8002的Controller，有如下服务payment/get/{id}  和  payment/lb
# 该配置的效果等同于route/GatewayConfig类中的配置。一种是配置方式，一种是硬编码方式
spring:
  application:
    name: cloud-gateway
#-----------------------------路由目标服务器单机配置--------------------------------
#  cloud:
#    gateway:
#      routes:
#        - id: payment_routh1 #payment_routh1 路由ID，没有固定的规则要求，但要求唯一
#          uri: http://localhost:8002 #匹配后提供服务的路由地址，即8002地址
#          predicates:
#            - Path=/payment/get/** #断言，匹配请求的url
#
#        - id: payment_routh2 #payment_routh2 路由ID，没有固定的规则要求，但要求唯一
#          uri: http://localhost:8002 #匹配后提供服务的路由地址，即8002地址
#          predicates:
#            - Path=/payment/lb/** #断言，匹配请求的url
#-----------------------------路由目标服务器单机配置--------------------------------
#-----------------------------路由目标服务器集群配置--------------------------------
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true #开启从注册中心动态创建路由的功能，利用微服务名进行路由
      routes:
        - id: payment_routh1 #payment_routh1 路由ID，没有固定的规则要求，但要求唯一
          uri: lb://cloud-payment-service #注册到Eureka的微服务名
          predicates:
            - Path=/payment/get/** #断言，匹配请求的url

        - id: payment_routh2 #payment_routh2 路由ID，没有固定的规则要求，但要求唯一
          uri: lb://cloud-payment-service #注册到Eureka的微服务名
          predicates:
            - Path=/payment/lb/** #断言，匹配请求的url
          filters:
            - AddRequestParameter=username,guwei #对已经匹配进来的请求进行处理，往请求参数中新增key:username,value:guwei
    loadbalancer:
      ribbon:
        enabled: false
#-----------------------------路由目标服务器集群配置--------------------------------

#---------------------------------断言Predicate----------------------------------
#可以看到上面只是单纯地通过url的路径来进行预言判断，然后匹配各自的服务。实际上SpringCloud内置了许多RoutePredicate工厂，这些Predicate
#会与HTTP请求的不同属性匹配，多个RoutePredicate工厂可以进行组合实现更精细化的路由匹配。详情如下：

##### After Route Predicate
#predicates:
#  - After=2020-02-21T15:00:00.000+08:00[Asia/Shanghai]  #表示该路由在该时间之后才会生效
##### Before Route Predicate
#predicates:
#  - Before=2020-02-21T15:00:00.000+08:00[Asia/Shanghai]  #表示该路由在该时间之前生效，之后就失效
##### Between Route Predicate
#predicates:
#  - Between=2020-02-21T15:00:00.000+08:00[Asia/Shanghai],2020-03-21T15:00:00.000+08:00[Asia/Shanghai]  #表示该路由在该时间区间内生效
##### Cookie Route Predicate
#predicates:
#  - Cookie=username,rumwei #匹配请求的cookie中包含key=username，同时username的值满足rumwei正则表达式的请求
#测试：命令行分别执行curl http://localhost:9527/payment/lb 和 curl http://localhost:9527/payment/lb --cookie "username=rumwei"
#或者在postman的Headers中新增kEY:Cookie,VALUE:username=rumwei来测试
##### Header Route Predicate
#predicates:
#  - Header=username,rumwei #类似Cookie的匹配
#测试：命令行分别执行curl http://localhost:9527/payment/lb 和 curl http://localhost:9527/payment/lb -H "username:rumwei"
##### Host Route Predicate
#predicates:
#  - Host=**.somehost.org,**.anotherhost.org #按主机过滤
##### Method Route Predicate
#predicates:
#  - Method=GET
##### Path Route Predicate
#predicates:
#  - Path=/payment/lb/**
##### Query Route Predicate
#predicates:
#  - Query=username,rumwei #类似Cookie的匹配，匹配请求的param
#---------------------------------断言Predicate----------------------------------

#---------------------------------过滤器Filter-----------------------------------
#Filter按处理时间分为前置过滤器和后置过滤器两类，即分别在分发请求到微服务之前处理和收到微服务响应之后处理。
#Filter按起作用范围，分为局部过滤器(GatewayFilter)和全局过滤器(GlobalFilter)
#---------------------------------过滤器Filter-----------------------------------

eureka:
  instance:
    hostname: cloud-gateway-service
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka

# 开启日志功能
#logging:
#  level:
#    org.springframework.cloud.gateway: TRACE
#    org.springframework.http.server.reactive: DEBUG
#    org.springframework.web.reactive: DEBUG
#    reactor.ipc.netty: DEBUG
