# bootstrap.yml是系统级的，其加载优先级高于application.yml
# SpringCloud会创建一个"Bootstrap Context"，作为Spring应用的"Application Context"的父上下文。初始化时，Bootstrap Context会负责
# 从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的"Environment"
# Bootstrap属性有高优先级，默认情况下，它们不会被本地配置覆盖，Bootstrap Context和Application Context有着不同的约定，所以新增一个
# 'bootstrap.yml'文件，保证Bootstrap Context和Application Context配置的分离

server:
  port: 3366
spring:
  application:
    name: config-client #注册进Eureka中心的微服务名
  cloud:
    config:
      label: master #仓库分支
      name: config #配置文件名称
      profile: dev #读取后缀名称 上述四个综合：即读取http://localhost:3344/master/config-dev.yml配置文件
      uri: http://localhost:3344
  # RabbitMQ相关配置,3344扮演Cloud Bus角色，当配置更新时，用户向3344发送刷新命令，3344负责将消息通知到配置中心客户端3355和3366
  # 假设本地已经按照了RabbitMQ服务，其相关接口为5672
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
eureka:
  client:
    service-url:
      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka
#暴露监控端点，实现配置动态刷新
management:
  endpoints:
    web:
      exposure:
        include: "*"
